// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: problems.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createProblem = `-- name: CreateProblem :one
INSERT INTO problems (
    id,
    title,
    description_path,
    testcases_path,
    tags,
    time_limit,
    memory_limit
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
) RETURNING id, title, description_path, testcases_path, tags, time_limit, memory_limit, created_at, updated_at
`

type CreateProblemParams struct {
	ID              uuid.UUID
	Title           string
	DescriptionPath string
	TestcasesPath   string
	Tags            []string
	TimeLimit       float64
	MemoryLimit     float64
}

func (q *Queries) CreateProblem(ctx context.Context, arg CreateProblemParams) (Problem, error) {
	row := q.db.QueryRowContext(ctx, createProblem,
		arg.ID,
		arg.Title,
		arg.DescriptionPath,
		arg.TestcasesPath,
		pq.Array(arg.Tags),
		arg.TimeLimit,
		arg.MemoryLimit,
	)
	var i Problem
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DescriptionPath,
		&i.TestcasesPath,
		pq.Array(&i.Tags),
		&i.TimeLimit,
		&i.MemoryLimit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProblemByID = `-- name: GetProblemByID :one
SELECT id, title, description_path, testcases_path, tags, time_limit, memory_limit, created_at, updated_at FROM problems WHERE id = $1
`

func (q *Queries) GetProblemByID(ctx context.Context, id uuid.UUID) (Problem, error) {
	row := q.db.QueryRowContext(ctx, getProblemByID, id)
	var i Problem
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DescriptionPath,
		&i.TestcasesPath,
		pq.Array(&i.Tags),
		&i.TimeLimit,
		&i.MemoryLimit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProblems = `-- name: GetProblems :many
SELECT (
    id,
    title,
    description_path,
    testcases_path,
    tags,
    time_limit,
    memory_limit,
    created_at,
    updated_at
) FROM problems
`

func (q *Queries) GetProblems(ctx context.Context) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, getProblems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var column_1 interface{}
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
